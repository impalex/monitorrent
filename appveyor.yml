environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"

install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --disable-pip-version-check --user --upgrade pip"

  - ps: >-
      $lxmlVersion = '3.8.0'

      if($env:PYTHON_VERSION -eq "3.5.x")
      {
        $lxmlName = "lxml-$lxmlVersion-cp35-cp35m-win32.whl"
      }
      else
      {
        $lxmlName = "lxml-$lxmlVersion-cp27-cp27m-win32.whl"
      }

      wget "http://www.edna-site.org/pub/wheelhouse/$lxmlName" -OutFile "$env:APPVEYOR_BUILD_FOLDER\$lxmlName"

      & pip install "$env:APPVEYOR_BUILD_FOLDER\$lxmlName"
      
      & pip install codecov

  #workaround for slow lxml download
  - "%CMD_IN_ENV% pip install -r requirements-dev.txt"

before_build:
  - nuget restore MonitorrentInstaller\MonitorrentInstaller.sln
  - xcopy /S /I /Q %PYTHON% MonitorrentInstaller\env
  - npm install
  
build_script:
- ps: .\appveyor\prepare_for_installer.ps1
- ps: msbuild "$env:APPVEYOR_BUILD_FOLDER\MonitorrentInstaller\MonitorrentInstaller.sln" /p:Platform="x86" /p:Configuration=Release /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" /t:Rebuild

artifacts:
    - path: MonitorrentInstaller\MonitorrentInstaller\bin\Release\MonitorrentInstaller.msi
      name: MonitorrentInstaller

on_success:
  - ps: >-
      $env:CI_NAME = 'appveyor'

      #$env:CI_BUILD_NUMBER = $env:APPVEYOR_BUILD_NUMBER

      $env:CI_BUILD_URL = "https://ci.appveyor.com/project/werwolfby/monitorrent/build/$($env:APPVEYOR_BUILD_VERSION)"

      $env:CI_BRANCH = $env:APPVEYOR_REPO_BRANCH

      $env:CI_PULL_REQUEST = $env:APPVEYOR_PULL_REQUEST_NUMBER

      &codecov -X gcov

test_script:
  # Run the project tests
  - py.test --cov=monitorrent --cov-report html --html=report.html -rw %APPVEYOR_BUILD_FOLDER%/tests

notifications:
  - provider: Slack
    auth_token:
      secure: BBMdcjCzNea28kr0kIVEOHIJNtJ2jgDZbkw+4aa9dUmTuIXTqzRMooguSMzQLZ+dehfFkHE5A5dzfSCUecL8oQ==
    channel: '#appveyor'
